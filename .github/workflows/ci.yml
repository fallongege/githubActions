name: Terraform deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
permissions: write-all
env:
  aws_region : "us-east-1"
jobs:
  Deploy:
    name: Terraform-Deploy
    runs-on: ubuntu-latest

     # Set the working directory to main for the config files
    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
      - name: Git clone the repository
        uses: actions/checkout@v3
      
      - name: Configure AWS Credentials for terraformer-read-only Staging
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.aws_region }}
          role-skip-session-tagging: true
      
      
       # Hello from AWS: WhoAmI
      - name: Sts GetCallerIdentity
        run: |
          aws sts get-caller-identity
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false
      
      - name: Terraform format
        id: fmt
        run: |
         terraform fmt -check
      
      - name: Terraform Init
        id: init
        run: |
          terraform init


      - name: Terraform validate
        id: validate
        run: |
          terraform validate -no-color
        
      - name: Terraform plan
        id: plan
        if: github.event_name == 'pull_request'
        run: |
         terraform plan -no-color 
        continue-on-error: true
        
      - name: add-plan-comment
        id: comment
        uses: actions/github-script@v3
        if: github.event_name == 'pull_request'
        env:
         PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Show Plan</summary>
          
            \`\`\`${process.env.PLAN}\`\`\`
          
            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
 
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
 
      - name: Terraform Apply
        id: apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
         terraform apply -auto-approve
      
      - name: Terraform Destroy
        if: steps.apply.outcome == 'success'
        run: |
         echo "** Running Terraform Destroy**"
         sleep 10
         terraform plan -destroy
         terraform destroy -auto-approve
      